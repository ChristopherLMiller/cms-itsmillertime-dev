/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres';
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  boolean,
  timestamp,
  numeric,
  integer,
  jsonb,
  text,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core';
import { sql, relations } from '@payloadcms/db-postgres/drizzle';
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published']);
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
]);
export const enum_pages_visibility = pgEnum('enum_pages_visibility', [
  'ALL',
  'AUTHENTICATED',
  'ANONYMOUS',
  'PRIVILEGED',
]);
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published']);
export const enum__pages_v_version_visibility = pgEnum('enum__pages_v_version_visibility', [
  'ALL',
  'AUTHENTICATED',
  'ANONYMOUS',
  'PRIVILEGED',
]);
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
]);
export const enum_nav_items_link_type = pgEnum('enum_nav_items_link_type', ['reference', 'custom']);
export const enum_gallery_albums_settings_visibility = pgEnum(
  'enum_gallery_albums_settings_visibility',
  ['ALL', 'AUTHENTICATED', 'PRIVILEGED'],
);
export const enum_gallery_images_settings_visibility = pgEnum(
  'enum_gallery_images_settings_visibility',
  ['ALL', 'AUTHENTICATED', 'PRIVILEGED'],
);
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
]);
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
]);
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
]);
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
]);
export const enum_nav_nav_items_link_type = pgEnum('enum_nav_nav_items_link_type', [
  'reference',
  'custom',
]);
export const enum_nav_nav_items_link_appearance = pgEnum('enum_nav_nav_items_link_appearance', [
  'default',
  'outline',
]);

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    displayName: varchar('display_name'),
    showNSFW: boolean('show_n_s_f_w').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
);

export const users_rels = pgTable(
  'users_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    rolesID: integer('roles_id'),
  },
  (columns) => ({
    order: index('users_rels_order_idx').on(columns.order),
    parentIdx: index('users_rels_parent_idx').on(columns.parent),
    pathIdx: index('users_rels_path_idx').on(columns.path),
    users_rels_roles_id_idx: index('users_rels_roles_id_idx').on(columns.rolesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_rels_parent_fk',
    }).onDelete('cascade'),
    rolesIdFk: foreignKey({
      columns: [columns['rolesID']],
      foreignColumns: [roles.id],
      name: 'users_rels_roles_fk',
    }).onDelete('cascade'),
  }),
);

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    caption: jsonb('caption'),
    exif: jsonb('exif'),
    blurhash: varchar('blurhash'),
    folder: integer('folder_id').references(() => payload_folders.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_folder_idx: index('media_folder_idx').on(columns.folder),
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
);

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    originalPublicationDate: timestamp('original_publication_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    word_count: numeric('word_count'),
    category: integer('category_id').references(() => posts_categories.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    folder: integer('folder_id').references(() => payload_folders.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_category_idx: index('posts_category_idx').on(columns.category),
    posts_featured_image_idx: index('posts_featured_image_idx').on(columns.featuredImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_folder_idx: index('posts_folder_idx').on(columns.folder),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
);

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'posts-tagsID': integer('posts_tags_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_tags_id_idx: index('posts_rels_posts_tags_id_idx').on(columns['posts-tagsID']),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    'posts-tagsIdFk': foreignKey({
      columns: [columns['posts-tagsID']],
      foreignColumns: [posts_tags.id],
      name: 'posts_rels_posts_tags_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_originalPublicationDate: timestamp('version_original_publication_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_word_count: numeric('version_word_count'),
    version_category: integer('version_category_id').references(() => posts_categories.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_description: varchar('version_meta_description'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_folder: integer('version_folder_id').references(() => payload_folders.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_category_idx: index('_posts_v_version_version_category_idx').on(
      columns.version_category,
    ),
    _posts_v_version_version_featured_image_idx: index(
      '_posts_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_folder_idx: index('_posts_v_version_version_folder_idx').on(
      columns.version_folder,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
);

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'posts-tagsID': integer('posts_tags_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_tags_id_idx: index('_posts_v_rels_posts_tags_id_idx').on(
      columns['posts-tagsID'],
    ),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    'posts-tagsIdFk': foreignKey({
      columns: [columns['posts-tagsID']],
      foreignColumns: [posts_tags.id],
      name: '_posts_v_rels_posts_tags_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_categories = pgTable(
  'posts_categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    posts_categories_slug_idx: index('posts_categories_slug_idx').on(columns.slug),
    posts_categories_updated_at_idx: index('posts_categories_updated_at_idx').on(columns.updatedAt),
    posts_categories_created_at_idx: index('posts_categories_created_at_idx').on(columns.createdAt),
  }),
);

export const posts_tags = pgTable(
  'posts_tags',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    posts_tags_slug_idx: index('posts_tags_slug_idx').on(columns.slug),
    posts_tags_updated_at_idx: index('posts_tags_updated_at_idx').on(columns.updatedAt),
    posts_tags_created_at_idx: index('posts_tags_created_at_idx').on(columns.createdAt),
  }),
);

export const pages_blocks = pgTable(
  'pages_blocks',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    block: jsonb('block'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    visibility: enum_pages_visibility('visibility').default('ALL'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
);

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    rolesID: integer('roles_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_roles_id_idx: index('pages_rels_roles_id_idx').on(columns.rolesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    rolesIdFk: foreignKey({
      columns: [columns['rolesID']],
      foreignColumns: [roles.id],
      name: 'pages_rels_roles_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_version_blocks = pgTable(
  '_pages_v_version_blocks',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    block: jsonb('block'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_blocks_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_blocks_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_blocks_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_visibility: enum__pages_v_version_visibility('version_visibility').default('ALL'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_description: varchar('version_meta_description'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
);

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    rolesID: integer('roles_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_roles_id_idx: index('_pages_v_rels_roles_id_idx').on(columns.rolesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    rolesIdFk: foreignKey({
      columns: [columns['rolesID']],
      foreignColumns: [roles.id],
      name: '_pages_v_rels_roles_fk',
    }).onDelete('cascade'),
  }),
);

export const nav_items = pgTable(
  'nav_items',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    link_type: enum_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    order: numeric('order').notNull().default('1'),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    nav_items_icon_idx: index('nav_items_icon_idx').on(columns.icon),
    nav_items_slug_idx: index('nav_items_slug_idx').on(columns.slug),
    nav_items_updated_at_idx: index('nav_items_updated_at_idx').on(columns.updatedAt),
    nav_items_created_at_idx: index('nav_items_created_at_idx').on(columns.createdAt),
  }),
);

export const nav_items_rels = pgTable(
  'nav_items_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    'nav-itemsID': integer('nav_items_id'),
  },
  (columns) => ({
    order: index('nav_items_rels_order_idx').on(columns.order),
    parentIdx: index('nav_items_rels_parent_idx').on(columns.parent),
    pathIdx: index('nav_items_rels_path_idx').on(columns.path),
    nav_items_rels_pages_id_idx: index('nav_items_rels_pages_id_idx').on(columns.pagesID),
    nav_items_rels_posts_id_idx: index('nav_items_rels_posts_id_idx').on(columns.postsID),
    nav_items_rels_nav_items_id_idx: index('nav_items_rels_nav_items_id_idx').on(
      columns['nav-itemsID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [nav_items.id],
      name: 'nav_items_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'nav_items_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'nav_items_rels_posts_fk',
    }).onDelete('cascade'),
    'nav-itemsIdFk': foreignKey({
      columns: [columns['nav-itemsID']],
      foreignColumns: [nav_items.id],
      name: 'nav_items_rels_nav_items_fk',
    }).onDelete('cascade'),
  }),
);

export const roles = pgTable(
  'roles',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    isDefault: boolean('is_default').default(false),
    permissions: jsonb('permissions'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    roles_name_idx: uniqueIndex('roles_name_idx').on(columns.name),
    roles_updated_at_idx: index('roles_updated_at_idx').on(columns.updatedAt),
    roles_created_at_idx: index('roles_created_at_idx').on(columns.createdAt),
  }),
);

export const gallery_albums = pgTable(
  'gallery_albums',
  {
    id: serial('id').primaryKey(),
    settings_slug: varchar('settings_slug'),
    settings_slugLock: boolean('settings_slug_lock').default(true),
    settings_isNsfw: boolean('settings_is_nsfw').default(false),
    settings_visibility: enum_gallery_albums_settings_visibility('settings_visibility')
      .notNull()
      .default('ALL'),
    title: varchar('title').notNull(),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    folder: integer('folder_id').references(() => payload_folders.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gallery_albums_settings_settings_slug_idx: index(
      'gallery_albums_settings_settings_slug_idx',
    ).on(columns.settings_slug),
    gallery_albums_meta_meta_image_idx: index('gallery_albums_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    gallery_albums_folder_idx: index('gallery_albums_folder_idx').on(columns.folder),
    gallery_albums_updated_at_idx: index('gallery_albums_updated_at_idx').on(columns.updatedAt),
    gallery_albums_created_at_idx: index('gallery_albums_created_at_idx').on(columns.createdAt),
  }),
);

export const gallery_albums_rels = pgTable(
  'gallery_albums_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'gallery-tagsID': integer('gallery_tags_id'),
    rolesID: integer('roles_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('gallery_albums_rels_order_idx').on(columns.order),
    parentIdx: index('gallery_albums_rels_parent_idx').on(columns.parent),
    pathIdx: index('gallery_albums_rels_path_idx').on(columns.path),
    gallery_albums_rels_gallery_tags_id_idx: index('gallery_albums_rels_gallery_tags_id_idx').on(
      columns['gallery-tagsID'],
    ),
    gallery_albums_rels_roles_id_idx: index('gallery_albums_rels_roles_id_idx').on(columns.rolesID),
    gallery_albums_rels_users_id_idx: index('gallery_albums_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [gallery_albums.id],
      name: 'gallery_albums_rels_parent_fk',
    }).onDelete('cascade'),
    'gallery-tagsIdFk': foreignKey({
      columns: [columns['gallery-tagsID']],
      foreignColumns: [gallery_tags.id],
      name: 'gallery_albums_rels_gallery_tags_fk',
    }).onDelete('cascade'),
    rolesIdFk: foreignKey({
      columns: [columns['rolesID']],
      foreignColumns: [roles.id],
      name: 'gallery_albums_rels_roles_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'gallery_albums_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const gallery_images = pgTable(
  'gallery_images',
  {
    id: serial('id').primaryKey(),
    settings_slug: varchar('settings_slug'),
    settings_slugLock: boolean('settings_slug_lock').default(true),
    settings_isNsfw: boolean('settings_is_nsfw').default(false),
    settings_visibility: enum_gallery_images_settings_visibility('settings_visibility')
      .notNull()
      .default('ALL'),
    selling_isSellable: boolean('selling_is_sellable').default(false),
    title: varchar('title').notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    folder: integer('folder_id').references(() => payload_folders.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gallery_images_settings_settings_slug_idx: index(
      'gallery_images_settings_settings_slug_idx',
    ).on(columns.settings_slug),
    gallery_images_image_idx: index('gallery_images_image_idx').on(columns.image),
    gallery_images_meta_meta_image_idx: index('gallery_images_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    gallery_images_folder_idx: index('gallery_images_folder_idx').on(columns.folder),
    gallery_images_updated_at_idx: index('gallery_images_updated_at_idx').on(columns.updatedAt),
    gallery_images_created_at_idx: index('gallery_images_created_at_idx').on(columns.createdAt),
  }),
);

export const gallery_images_rels = pgTable(
  'gallery_images_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'gallery-tagsID': integer('gallery_tags_id'),
    rolesID: integer('roles_id'),
    usersID: integer('users_id'),
    'gallery-albumsID': integer('gallery_albums_id'),
  },
  (columns) => ({
    order: index('gallery_images_rels_order_idx').on(columns.order),
    parentIdx: index('gallery_images_rels_parent_idx').on(columns.parent),
    pathIdx: index('gallery_images_rels_path_idx').on(columns.path),
    gallery_images_rels_gallery_tags_id_idx: index('gallery_images_rels_gallery_tags_id_idx').on(
      columns['gallery-tagsID'],
    ),
    gallery_images_rels_roles_id_idx: index('gallery_images_rels_roles_id_idx').on(columns.rolesID),
    gallery_images_rels_users_id_idx: index('gallery_images_rels_users_id_idx').on(columns.usersID),
    gallery_images_rels_gallery_albums_id_idx: index(
      'gallery_images_rels_gallery_albums_id_idx',
    ).on(columns['gallery-albumsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [gallery_images.id],
      name: 'gallery_images_rels_parent_fk',
    }).onDelete('cascade'),
    'gallery-tagsIdFk': foreignKey({
      columns: [columns['gallery-tagsID']],
      foreignColumns: [gallery_tags.id],
      name: 'gallery_images_rels_gallery_tags_fk',
    }).onDelete('cascade'),
    rolesIdFk: foreignKey({
      columns: [columns['rolesID']],
      foreignColumns: [roles.id],
      name: 'gallery_images_rels_roles_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'gallery_images_rels_users_fk',
    }).onDelete('cascade'),
    'gallery-albumsIdFk': foreignKey({
      columns: [columns['gallery-albumsID']],
      foreignColumns: [gallery_albums.id],
      name: 'gallery_images_rels_gallery_albums_fk',
    }).onDelete('cascade'),
  }),
);

export const gallery_tags = pgTable(
  'gallery_tags',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gallery_tags_slug_idx: index('gallery_tags_slug_idx').on(columns.slug),
    gallery_tags_updated_at_idx: index('gallery_tags_updated_at_idx').on(columns.updatedAt),
    gallery_tags_created_at_idx: index('gallery_tags_created_at_idx').on(columns.createdAt),
  }),
);

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You''ve received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
);

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
);

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
);

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_folders = pgTable(
  'payload_folders',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    folder: integer('folder_id').references((): AnyPgColumn => payload_folders.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_folders_name_idx: index('payload_folders_name_idx').on(columns.name),
    payload_folders_folder_idx: index('payload_folders_folder_idx').on(columns.folder),
    payload_folders_updated_at_idx: index('payload_folders_updated_at_idx').on(columns.updatedAt),
    payload_folders_created_at_idx: index('payload_folders_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    postsID: integer('posts_id'),
    'posts-categoriesID': integer('posts_categories_id'),
    'posts-tagsID': integer('posts_tags_id'),
    pagesID: integer('pages_id'),
    'nav-itemsID': integer('nav_items_id'),
    rolesID: integer('roles_id'),
    'gallery-albumsID': integer('gallery_albums_id'),
    'gallery-imagesID': integer('gallery_images_id'),
    'gallery-tagsID': integer('gallery_tags_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-foldersID': integer('payload_folders_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_posts_categories_id_idx: index(
      'payload_locked_documents_rels_posts_categories_id_idx',
    ).on(columns['posts-categoriesID']),
    payload_locked_documents_rels_posts_tags_id_idx: index(
      'payload_locked_documents_rels_posts_tags_id_idx',
    ).on(columns['posts-tagsID']),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_nav_items_id_idx: index(
      'payload_locked_documents_rels_nav_items_id_idx',
    ).on(columns['nav-itemsID']),
    payload_locked_documents_rels_roles_id_idx: index(
      'payload_locked_documents_rels_roles_id_idx',
    ).on(columns.rolesID),
    payload_locked_documents_rels_gallery_albums_id_idx: index(
      'payload_locked_documents_rels_gallery_albums_id_idx',
    ).on(columns['gallery-albumsID']),
    payload_locked_documents_rels_gallery_images_id_idx: index(
      'payload_locked_documents_rels_gallery_images_id_idx',
    ).on(columns['gallery-imagesID']),
    payload_locked_documents_rels_gallery_tags_id_idx: index(
      'payload_locked_documents_rels_gallery_tags_id_idx',
    ).on(columns['gallery-tagsID']),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_folders_id_idx: index(
      'payload_locked_documents_rels_payload_folders_id_idx',
    ).on(columns['payload-foldersID']),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    'posts-categoriesIdFk': foreignKey({
      columns: [columns['posts-categoriesID']],
      foreignColumns: [posts_categories.id],
      name: 'payload_locked_documents_rels_posts_categories_fk',
    }).onDelete('cascade'),
    'posts-tagsIdFk': foreignKey({
      columns: [columns['posts-tagsID']],
      foreignColumns: [posts_tags.id],
      name: 'payload_locked_documents_rels_posts_tags_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    'nav-itemsIdFk': foreignKey({
      columns: [columns['nav-itemsID']],
      foreignColumns: [nav_items.id],
      name: 'payload_locked_documents_rels_nav_items_fk',
    }).onDelete('cascade'),
    rolesIdFk: foreignKey({
      columns: [columns['rolesID']],
      foreignColumns: [roles.id],
      name: 'payload_locked_documents_rels_roles_fk',
    }).onDelete('cascade'),
    'gallery-albumsIdFk': foreignKey({
      columns: [columns['gallery-albumsID']],
      foreignColumns: [gallery_albums.id],
      name: 'payload_locked_documents_rels_gallery_albums_fk',
    }).onDelete('cascade'),
    'gallery-imagesIdFk': foreignKey({
      columns: [columns['gallery-imagesID']],
      foreignColumns: [gallery_images.id],
      name: 'payload_locked_documents_rels_gallery_images_fk',
    }).onDelete('cascade'),
    'gallery-tagsIdFk': foreignKey({
      columns: [columns['gallery-tagsID']],
      foreignColumns: [gallery_tags.id],
      name: 'payload_locked_documents_rels_gallery_tags_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-foldersIdFk': foreignKey({
      columns: [columns['payload-foldersID']],
      foreignColumns: [payload_folders.id],
      name: 'payload_locked_documents_rels_payload_folders_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const nav_nav_items = pgTable(
  'nav_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_nav_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
    link_appearance: enum_nav_nav_items_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('nav_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('nav_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [nav.id],
      name: 'nav_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const nav = pgTable('nav', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
});

export const nav_rels = pgTable(
  'nav_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('nav_rels_order_idx').on(columns.order),
    parentIdx: index('nav_rels_parent_idx').on(columns.parent),
    pathIdx: index('nav_rels_path_idx').on(columns.path),
    nav_rels_pages_id_idx: index('nav_rels_pages_id_idx').on(columns.pagesID),
    nav_rels_posts_id_idx: index('nav_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [nav.id],
      name: 'nav_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'nav_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'nav_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const relations_users_rels = relations(users_rels, ({ one }) => ({
  parent: one(users, {
    fields: [users_rels.parent],
    references: [users.id],
    relationName: '_rels',
  }),
  rolesID: one(roles, {
    fields: [users_rels.rolesID],
    references: [roles.id],
    relationName: 'roles',
  }),
}));
export const relations_users = relations(users, ({ many }) => ({
  _rels: many(users_rels, {
    relationName: '_rels',
  }),
}));
export const relations_media = relations(media, ({ one }) => ({
  folder: one(payload_folders, {
    fields: [media.folder],
    references: [payload_folders.id],
    relationName: 'folder',
  }),
}));
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  'posts-tagsID': one(posts_tags, {
    fields: [posts_rels['posts-tagsID']],
    references: [posts_tags.id],
    relationName: 'posts-tags',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  category: one(posts_categories, {
    fields: [posts.category],
    references: [posts_categories.id],
    relationName: 'category',
  }),
  featuredImage: one(media, {
    fields: [posts.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  folder: one(payload_folders, {
    fields: [posts.folder],
    references: [payload_folders.id],
    relationName: 'folder',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}));
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  'posts-tagsID': one(posts_tags, {
    fields: [_posts_v_rels['posts-tagsID']],
    references: [posts_tags.id],
    relationName: 'posts-tags',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_category: one(posts_categories, {
    fields: [_posts_v.version_category],
    references: [posts_categories.id],
    relationName: 'version_category',
  }),
  version_featuredImage: one(media, {
    fields: [_posts_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_folder: one(payload_folders, {
    fields: [_posts_v.version_folder],
    references: [payload_folders.id],
    relationName: 'version_folder',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_posts_categories = relations(posts_categories, () => ({}));
export const relations_posts_tags = relations(posts_tags, () => ({}));
export const relations_pages_blocks = relations(pages_blocks, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks._parentID],
    references: [pages.id],
    relationName: 'blocks',
  }),
}));
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  rolesID: one(roles, {
    fields: [pages_rels.rolesID],
    references: [roles.id],
    relationName: 'roles',
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  blocks: many(pages_blocks, {
    relationName: 'blocks',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}));
export const relations__pages_v_version_blocks = relations(_pages_v_version_blocks, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_version_blocks._parentID],
    references: [_pages_v.id],
    relationName: 'version_blocks',
  }),
}));
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  rolesID: one(roles, {
    fields: [_pages_v_rels.rolesID],
    references: [roles.id],
    relationName: 'roles',
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_blocks: many(_pages_v_version_blocks, {
    relationName: 'version_blocks',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_nav_items_rels = relations(nav_items_rels, ({ one }) => ({
  parent: one(nav_items, {
    fields: [nav_items_rels.parent],
    references: [nav_items.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [nav_items_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [nav_items_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  'nav-itemsID': one(nav_items, {
    fields: [nav_items_rels['nav-itemsID']],
    references: [nav_items.id],
    relationName: 'nav-items',
  }),
}));
export const relations_nav_items = relations(nav_items, ({ one, many }) => ({
  icon: one(media, {
    fields: [nav_items.icon],
    references: [media.id],
    relationName: 'icon',
  }),
  _rels: many(nav_items_rels, {
    relationName: '_rels',
  }),
}));
export const relations_roles = relations(roles, () => ({}));
export const relations_gallery_albums_rels = relations(gallery_albums_rels, ({ one }) => ({
  parent: one(gallery_albums, {
    fields: [gallery_albums_rels.parent],
    references: [gallery_albums.id],
    relationName: '_rels',
  }),
  'gallery-tagsID': one(gallery_tags, {
    fields: [gallery_albums_rels['gallery-tagsID']],
    references: [gallery_tags.id],
    relationName: 'gallery-tags',
  }),
  rolesID: one(roles, {
    fields: [gallery_albums_rels.rolesID],
    references: [roles.id],
    relationName: 'roles',
  }),
  usersID: one(users, {
    fields: [gallery_albums_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations_gallery_albums = relations(gallery_albums, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [gallery_albums.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  folder: one(payload_folders, {
    fields: [gallery_albums.folder],
    references: [payload_folders.id],
    relationName: 'folder',
  }),
  _rels: many(gallery_albums_rels, {
    relationName: '_rels',
  }),
}));
export const relations_gallery_images_rels = relations(gallery_images_rels, ({ one }) => ({
  parent: one(gallery_images, {
    fields: [gallery_images_rels.parent],
    references: [gallery_images.id],
    relationName: '_rels',
  }),
  'gallery-tagsID': one(gallery_tags, {
    fields: [gallery_images_rels['gallery-tagsID']],
    references: [gallery_tags.id],
    relationName: 'gallery-tags',
  }),
  rolesID: one(roles, {
    fields: [gallery_images_rels.rolesID],
    references: [roles.id],
    relationName: 'roles',
  }),
  usersID: one(users, {
    fields: [gallery_images_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'gallery-albumsID': one(gallery_albums, {
    fields: [gallery_images_rels['gallery-albumsID']],
    references: [gallery_albums.id],
    relationName: 'gallery-albums',
  }),
}));
export const relations_gallery_images = relations(gallery_images, ({ one, many }) => ({
  image: one(media, {
    fields: [gallery_images.image],
    references: [media.id],
    relationName: 'image',
  }),
  meta_image: one(media, {
    fields: [gallery_images.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  folder: one(payload_folders, {
    fields: [gallery_images.folder],
    references: [payload_folders.id],
    relationName: 'folder',
  }),
  _rels: many(gallery_images_rels, {
    relationName: '_rels',
  }),
}));
export const relations_gallery_tags = relations(gallery_tags, () => ({}));
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}));
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}));
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}));
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}));
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}));
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
);
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}));
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}));
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}));
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}));
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}));
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}));
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
);
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}));
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_search = relations(search, ({ many }) => ({
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_folders = relations(payload_folders, ({ one }) => ({
  folder: one(payload_folders, {
    fields: [payload_folders.folder],
    references: [payload_folders.id],
    relationName: 'folder',
  }),
}));
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}));
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    'posts-categoriesID': one(posts_categories, {
      fields: [payload_locked_documents_rels['posts-categoriesID']],
      references: [posts_categories.id],
      relationName: 'posts-categories',
    }),
    'posts-tagsID': one(posts_tags, {
      fields: [payload_locked_documents_rels['posts-tagsID']],
      references: [posts_tags.id],
      relationName: 'posts-tags',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    'nav-itemsID': one(nav_items, {
      fields: [payload_locked_documents_rels['nav-itemsID']],
      references: [nav_items.id],
      relationName: 'nav-items',
    }),
    rolesID: one(roles, {
      fields: [payload_locked_documents_rels.rolesID],
      references: [roles.id],
      relationName: 'roles',
    }),
    'gallery-albumsID': one(gallery_albums, {
      fields: [payload_locked_documents_rels['gallery-albumsID']],
      references: [gallery_albums.id],
      relationName: 'gallery-albums',
    }),
    'gallery-imagesID': one(gallery_images, {
      fields: [payload_locked_documents_rels['gallery-imagesID']],
      references: [gallery_images.id],
      relationName: 'gallery-images',
    }),
    'gallery-tagsID': one(gallery_tags, {
      fields: [payload_locked_documents_rels['gallery-tagsID']],
      references: [gallery_tags.id],
      relationName: 'gallery-tags',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-foldersID': one(payload_folders, {
      fields: [payload_locked_documents_rels['payload-foldersID']],
      references: [payload_folders.id],
      relationName: 'payload-folders',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
);
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));
export const relations_nav_nav_items = relations(nav_nav_items, ({ one }) => ({
  _parentID: one(nav, {
    fields: [nav_nav_items._parentID],
    references: [nav.id],
    relationName: 'navItems',
  }),
}));
export const relations_nav_rels = relations(nav_rels, ({ one }) => ({
  parent: one(nav, {
    fields: [nav_rels.parent],
    references: [nav.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [nav_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [nav_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_nav = relations(nav, ({ many }) => ({
  navItems: many(nav_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(nav_rels, {
    relationName: '_rels',
  }),
}));

type DatabaseSchema = {
  enum_posts_status: typeof enum_posts_status;
  enum__posts_v_version_status: typeof enum__posts_v_version_status;
  enum_pages_visibility: typeof enum_pages_visibility;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_version_visibility: typeof enum__pages_v_version_visibility;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_nav_items_link_type: typeof enum_nav_items_link_type;
  enum_gallery_albums_settings_visibility: typeof enum_gallery_albums_settings_visibility;
  enum_gallery_images_settings_visibility: typeof enum_gallery_images_settings_visibility;
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type;
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug;
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state;
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug;
  enum_nav_nav_items_link_type: typeof enum_nav_nav_items_link_type;
  enum_nav_nav_items_link_appearance: typeof enum_nav_nav_items_link_appearance;
  users: typeof users;
  users_rels: typeof users_rels;
  media: typeof media;
  posts: typeof posts;
  posts_rels: typeof posts_rels;
  _posts_v: typeof _posts_v;
  _posts_v_rels: typeof _posts_v_rels;
  posts_categories: typeof posts_categories;
  posts_tags: typeof posts_tags;
  pages_blocks: typeof pages_blocks;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  _pages_v_version_blocks: typeof _pages_v_version_blocks;
  _pages_v: typeof _pages_v;
  _pages_v_rels: typeof _pages_v_rels;
  nav_items: typeof nav_items;
  nav_items_rels: typeof nav_items_rels;
  roles: typeof roles;
  gallery_albums: typeof gallery_albums;
  gallery_albums_rels: typeof gallery_albums_rels;
  gallery_images: typeof gallery_images;
  gallery_images_rels: typeof gallery_images_rels;
  gallery_tags: typeof gallery_tags;
  forms_blocks_checkbox: typeof forms_blocks_checkbox;
  forms_blocks_country: typeof forms_blocks_country;
  forms_blocks_email: typeof forms_blocks_email;
  forms_blocks_message: typeof forms_blocks_message;
  forms_blocks_number: typeof forms_blocks_number;
  forms_blocks_select_options: typeof forms_blocks_select_options;
  forms_blocks_select: typeof forms_blocks_select;
  forms_blocks_state: typeof forms_blocks_state;
  forms_blocks_text: typeof forms_blocks_text;
  forms_blocks_textarea: typeof forms_blocks_textarea;
  forms_emails: typeof forms_emails;
  forms: typeof forms;
  form_submissions_submission_data: typeof form_submissions_submission_data;
  form_submissions: typeof form_submissions;
  search: typeof search;
  search_rels: typeof search_rels;
  payload_folders: typeof payload_folders;
  payload_jobs_log: typeof payload_jobs_log;
  payload_jobs: typeof payload_jobs;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  nav_nav_items: typeof nav_nav_items;
  nav: typeof nav;
  nav_rels: typeof nav_rels;
  relations_users_rels: typeof relations_users_rels;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_posts_rels: typeof relations_posts_rels;
  relations_posts: typeof relations_posts;
  relations__posts_v_rels: typeof relations__posts_v_rels;
  relations__posts_v: typeof relations__posts_v;
  relations_posts_categories: typeof relations_posts_categories;
  relations_posts_tags: typeof relations_posts_tags;
  relations_pages_blocks: typeof relations_pages_blocks;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_version_blocks: typeof relations__pages_v_version_blocks;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_nav_items_rels: typeof relations_nav_items_rels;
  relations_nav_items: typeof relations_nav_items;
  relations_roles: typeof relations_roles;
  relations_gallery_albums_rels: typeof relations_gallery_albums_rels;
  relations_gallery_albums: typeof relations_gallery_albums;
  relations_gallery_images_rels: typeof relations_gallery_images_rels;
  relations_gallery_images: typeof relations_gallery_images;
  relations_gallery_tags: typeof relations_gallery_tags;
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox;
  relations_forms_blocks_country: typeof relations_forms_blocks_country;
  relations_forms_blocks_email: typeof relations_forms_blocks_email;
  relations_forms_blocks_message: typeof relations_forms_blocks_message;
  relations_forms_blocks_number: typeof relations_forms_blocks_number;
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options;
  relations_forms_blocks_select: typeof relations_forms_blocks_select;
  relations_forms_blocks_state: typeof relations_forms_blocks_state;
  relations_forms_blocks_text: typeof relations_forms_blocks_text;
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea;
  relations_forms_emails: typeof relations_forms_emails;
  relations_forms: typeof relations_forms;
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data;
  relations_form_submissions: typeof relations_form_submissions;
  relations_search_rels: typeof relations_search_rels;
  relations_search: typeof relations_search;
  relations_payload_folders: typeof relations_payload_folders;
  relations_payload_jobs_log: typeof relations_payload_jobs_log;
  relations_payload_jobs: typeof relations_payload_jobs;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_nav_nav_items: typeof relations_nav_nav_items;
  relations_nav_rels: typeof relations_nav_rels;
  relations_nav: typeof relations_nav;
};

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
